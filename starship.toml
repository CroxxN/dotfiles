[username]
style_user = "green bold"
style_root = "red bold"
format = "[$user]($style) "
disabled = false
show_always = true

[hostname]
ssh_only = true
format = 'on [Croxx Machine](bold yellow) '
trim_at = "."
disabled = false

[memory_usage]
threshold=10
symbol = "󰣀 "
disabled = false
format = '[on $ram_pct roids](bold yellow) '

# Replace the "❯" symbol in the prompt with "➜"
[character]                            # The name of the module we are configuring is "character"
success_symbol = "[➜](bold green)"     # The "success_symbol" segment is being set to "➜" with the color "bold green"
error_symbol = "[✗](bold red)"
#  
# configure directory
[directory]
format="[exploring](bold blue) [$path](bold purple) "
read_only = " "
truncation_length = 3
truncation_symbol = "…/"
# truncate_to_repo = true # truncates directory to root folder if in github repo
style = "bold italic blue"

[cmd_duration]
min_time = 4
show_milliseconds = false
disabled = false
style = "bold italic red"

[[battery.display]]
threshold = 100
style = 'bold red'

[battery]
format = '[juiced $symbol$percentage ]($style)'

[aws]
symbol = "  "

[conda]
symbol = " "

[dart]
symbol = " "

#[directory]
#read_only = " "

[docker_context]
symbol = " "
format = "with [$symbol$context]($style) "
style = "blue bold"
only_with_files = true
detect_files = ["docker-compose.yml", "docker-compose.yaml", "Dockerfile"]
detect_folders = []
disabled = false

[elixir]
symbol = " "

[elm]
symbol = " "

[git_branch]
symbol = " "

[golang]
symbol = " "

[hg_branch]
symbol = " "

[sudo]
disabled = false
symbol = "󰣇 "

[java]
symbol = " "

[julia]
symbol = " "

[nim]
symbol = " "

[nix_shell]
symbol = " "

[package]
disabled=true

[perl]
symbol = " "

[php]
symbol = " "

[c]
symbol=" "

[custom.cpp]
# Determine c++ compiler version using (rip)grepping
command = 'c++ --version | rg -o "\)\s\d+(\.\d+)+" | rg -o "\d+(\.\d+)+"'
# version_format='v${raw}'
symbol = ' '
style='bold blue'
format = 'with [$symbol($output-cpp)]($style) '
detect_extensions=['cpp', 'c++', 'hpp', 'hxx', 'cxx']

[python]
symbol = " "
#pyenv_version_name = true
format = 'with [${symbol}python (${version} )(\($virtualenv\) )]($style)'
style = "bold yellow"
pyenv_prefix = "venv "
python_binary = ["./venv/bin/python", "python", "python3", "python2"]
detect_extensions = ["py"]
version_format = "v${raw}"

[lua]
symbol = " "

[ruby]
symbol = " "

[rust]
symbol = " "

[scala]
symbol = " "

[shlvl]
symbol = " "

[swift]
symbol = "ﯣ "

[nodejs]
format = "with [ Node.js $version](bold green) "
detect_files = ["package.json", ".node-version"]
detect_folders = ["node_modules"]
